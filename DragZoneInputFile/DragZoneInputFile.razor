@using Microsoft.JSInterop;

<HeadContent>
    <style>
        :root {
            --drag-zone-bg-hover: #F3F3F4;
            --drag-zone-bg-focus: #FFEBC6;
            --drag-zone-border-focus: blue;
        }

        .drag-zone {
            border: 3px dashed black;
            padding: 3rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            position: relative;
            height: 200px;
            cursor: pointer !important;
        }

            .drag-zone:hover {
                background-color: var(--drag-zone-bg-hover);
            }

            .drag-zone.focus {
                border: 2px dashed var(--drag-zone-border-focus);
                border-radius: 8px;
                padding: 0;
                height: 200px;
                background-color: var(--drag-zone-bg-focus);
                display: flex;
                justify-content: center;
                align-items: center;
            }

            .drag-zone .file-grid {
                display: grid;
                grid-template-columns: repeat(3, minmax(100px, 1fr));
                grid-gap: 5px;
                margin: 5px;
                justify-items: flex-start;
            }

    </style>
</HeadContent>
<div @ref="@dragZoneElement" name="drag-zone" title="Drag and drop files here or click to upload." draggable="@draggable" @ondrop="HandleDragLeave" id='@($"dragZone-{id}")' style="@Style" class="@finalClass">
    <InputFile style="position: absolute; width: 100%; height: 100%; opacity: 0;cursor: pointer;" draggable="@draggable" @ondragenter="HandleDragEnter" @ondragleave="HandleDragLeave" OnChange="OnFileUpload" id='@($"inputFile-{id}")' multiple="@Multiple" accept="@FileFormats"></InputFile>
    <div class="@_fileViewClass">
        @foreach (var file in _addedFiles)
        {
            <FileCard File="@file"></FileCard>
        }
    </div>
    <div class="@_textClass">Drag and drop files here or click to upload.</div>
</div>
@code {
    ElementReference dragZoneElement;
    string id = Guid.NewGuid().ToString().Substring(0, 8);
    string finalClass => string.Join(" ", _classNames);
    [Parameter]
    public string Style { get => _style; set => _style = value; }
    bool draggable = true;
    string _style = $"height: {_height}px;";
    string _fileViewClass => _addedFiles.Any() ? "file-grid" : "file-grid d-none";
    string _textClass => _addedFiles.Any() ? "d-none" : string.Empty;

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    /// <summary>
    /// The height of the drag zone in pixels
    /// default is 200
    public float Height { get => _height; set => _height = value; }

    static float _height = 200;

    [Parameter]
    /// <summary>
    /// The file formats that the user can select separated by commas
    /// Example: .pdf,.doc,.docx
    /// default is *
    /// </summary>
    public string FileFormats { get; set; }

    [Parameter]
    /// <summary>
    /// If true, the user can select multiple files
    /// default is false
    /// </summary>
    public bool Multiple { get; set; } = false;

    private List<string> _classNames = new List<string>() { "drag-zone" };
    private List<IBrowserFile> _addedFiles = new List<IBrowserFile>();
    [Parameter]
    public EventCallback<IEnumerable<IBrowserFile>> OnUpload { get; set; }

    private async Task HandleDragLeave(DragEventArgs e)
    {
        _classNames.Remove("focus");
        await InvokeAsync(StateHasChanged);
    }
    private async Task HandleDragEnter(DragEventArgs e)
    {
        _classNames.Add("focus");
        await InvokeAsync(StateHasChanged);
    }
    bool IsFileValid(string file)
    {
        if (string.IsNullOrEmpty(FileFormats))
        {
            return true;
        }
        return FileFormats.Split(",").Any(x => file.EndsWith(x));
    }
    async Task OnFileUpload(InputFileChangeEventArgs args)
    {
        if (!Multiple)
        {
            var file = args.File;
            if (!IsFileValid(file.Name))
            {
                return;
            }
            _addedFiles.Clear();
            _addedFiles.Add(file);

        }
        else
        {
            foreach (var file in args.GetMultipleFiles())
            {
                if (!IsFileValid(file.Name))
                {
                    continue;
                }
                _addedFiles.Add(file);
            }
        }
        if (_addedFiles.Any())
            await OnUpload.InvokeAsync(_addedFiles);

    }
    protected override void OnInitialized()
    {
        var parameterClassess = Class?.Split(" ");
        if (parameterClassess != null)
        {
            _classNames.AddRange(parameterClassess);
        }
    }
}